<!DOCTYPE html>
<html>
<head>
    <title>Simple Kingdom (HTML)</title>
    <style>
        body { margin: 0; overflow: hidden; background-color: #f0e68c; } /* 淡黄色背景 */
        canvas { display: block; background-color: #a9d18e; /* 浅绿色画布背景 */ }
        #ui {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
    <div id="ui">
        <p>木材: <span id="woodCount">0</span></p>
        <p>石头: <span id="stoneCount">0</span></p>
        <button onclick="buildHouse()">建造房屋</button>
        <button onclick="buildStorage()">建造仓库</button>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const ui = document.getElementById('ui');
        const woodCountDisplay = document.getElementById('woodCount');
        const stoneCountDisplay = document.getElementById('stoneCount');

        const TILE_SIZE = 32;
        const GRID_WIDTH = 20;
        const GRID_HEIGHT = 15;
        canvas.width = GRID_WIDTH * TILE_SIZE;
        canvas.height = GRID_HEIGHT * TILE_SIZE;

        let playerX = TILE_SIZE;
        let playerY = TILE_SIZE;
        const PLAYER_SIZE = TILE_SIZE;
        const PLAYER_SPEED = 5;

        let wood = 0;
        let stone = 0;
        let buildings = [];

        // 简单的地图数据 (0: 草地, 1: 树木, 2: 石头)
        let map = Array(GRID_HEIGHT).fill(null).map(() => Array(GRID_WIDTH).fill(0));
        // 随机放置一些树木和石头
        for (let i = 0; i < 20; i++) {
            const x = Math.floor(Math.random() * GRID_WIDTH);
            const y = Math.floor(Math.random() * GRID_HEIGHT);
            map[y][x] = 1; // 树木
        }
        for (let i = 0; i < 15; i++) {
            const x = Math.floor(Math.random() * GRID_WIDTH);
            const y = Math.floor(Math.random() * GRID_HEIGHT);
            if (map[y][x] === 0) {
                map[y][x] = 2; // 石头
            }
        }

        function drawTile(x, y, type) {
            switch (type) {
                case 0: // 草地
                    ctx.fillStyle = '#a9d18e';
                    ctx.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
                    break;
                case 1: // 树木
                    ctx.fillStyle = 'green';
                    ctx.fillRect(x * TILE_SIZE + 8, y * TILE_SIZE + 8, TILE_SIZE - 16, TILE_SIZE - 16);
                    break;
                case 2: // 石头
                    ctx.fillStyle = 'gray';
                    ctx.fillRect(x * TILE_SIZE + 10, y * TILE_SIZE + 10, TILE_SIZE - 20, TILE_SIZE - 20);
                    break;
                case 'house':
                    ctx.fillStyle = 'brown';
                    ctx.fillRect(x, y, TILE_SIZE, TILE_SIZE);
                    break;
                case 'storage':
                    ctx.fillStyle = 'darkgray';
                    ctx.fillRect(x, y, TILE_SIZE, TILE_SIZE);
                    break;
            }
        }

        function drawMap() {
            for (let y = 0; y < GRID_HEIGHT; y++) {
                for (let x = 0; x < GRID_WIDTH; x++) {
                    drawTile(x, y, map[y][x]);
                }
            }
            buildings.forEach(building => {
                drawTile(building.x, building.y, building.type);
            });
        }

        function drawPlayer() {
            ctx.fillStyle = 'blue';
            ctx.fillRect(playerX, playerY, PLAYER_SIZE, PLAYER_SIZE);
        }

        function updateUI() {
            woodCountDisplay.textContent = wood;
            stoneCountDisplay.textContent = stone;
        }

        function collectResource(resourceType) {
            const gridX = Math.floor(playerX / TILE_SIZE);
            const gridY = Math.floor(playerY / TILE_SIZE);
            if (gridX >= 0 && gridX < GRID_WIDTH && gridY >= 0 && gridY < GRID_HEIGHT) {
                if (resourceType === 'wood' && map[gridY][gridX] === 1) {
                    wood++;
                    map[gridY][gridX] = 0; // 移除树木
                    updateUI();
                } else if (resourceType === 'stone' && map[gridY][gridX] === 2) {
                    stone++;
                    map[gridY][gridX] = 0; // 移除石头
                    updateUI();
                }
            }
        }

        function buildHouse() {
            if (wood >= 10) {
                buildings.push({ type: 'house', x: playerX, y: playerY });
                wood -= 10;
                updateUI();
            } else {
                alert("需要 10 木材才能建造房屋！");
            }
        }

        function buildStorage() {
            if (stone >= 15) {
                buildings.push({ type: 'storage', x: playerX, y: playerY });
                stone -= 15;
                updateUI();
            } else {
                alert("需要 15 石头才能建造仓库！");
            }
        }

        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            drawMap();
            drawPlayer();
            requestAnimationFrame(gameLoop);
        }

        document.addEventListener('keydown', (event) => {
            switch (event.key) {
                case 'ArrowLeft':
                    playerX = Math.max(0, playerX - PLAYER_SPEED);
                    break;
                case 'ArrowRight':
                    playerX = Math.min(canvas.width - PLAYER_SIZE, playerX + PLAYER_SPEED);
                    break;
                case 'ArrowUp':
                    playerY = Math.max(0, playerY - PLAYER_SPEED);
                    break;
                case 'ArrowDown':
                    playerY = Math.min(canvas.height - PLAYER_SIZE, playerY + PLAYER_SPEED);
                    break;
                case ' ': // 空格键用于收集资源
                    const gridX = Math.floor(playerX / TILE_SIZE);
                    const gridY = Math.floor(playerY / TILE_SIZE);
                    if (map[gridY][gridX] === 1) {
                        collectResource('wood');
                    } else if (map[gridY][gridX] === 2) {
                        collectResource('stone');
                    }
                    break;
            }
        });

        gameLoop();
    </script>
</body>
</html>